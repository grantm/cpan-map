#!/usr/bin/perl
#
# This script is a quick and dirty hack to generate the JSON file used by
# the HTML/Javascript map frontend.
#

use strict;
use warnings;

use FindBin;
use File::Basename qw();
use File::Spec;
use Math::PlanePath::HilbertCurve;
use JSON::XS;
use Data::Dumper;

my $mod_list = $ENV{HOME} . '/.cpan/sources/modules/02packages.details.txt.gz';

my $output_file = File::Spec->catfile(
    File::Basename::dirname($FindBin::Bin), 'html', 'cpan-map-data.json'
);

my $critical_mass = 30;
my $path;
my $max_row = 0;
my $max_col = 0;

open my $in, "zcat $mod_list |" or die "$!";


# Build a list of distributions clustered by namespace

my %ns_dist = ();
while(<$in>) {
    my($maintainer,$dist) = m{
        ^\S+                       # Module name
        \s+\S+                     # Version number
        \s+
        (?:[^/]+/)+                # Path to maintainer's director
        ([^/]+)/                   # Maintainer's CPAN-ID
        ([^/\s-]+(?:-[^/\s-]+)*)-  # Distribution name
    }x or next;
    $dist =~  s{-}{::}g;
    my($ns) = split '::', $dist, 2;
    $ns_dist{lc($ns)}->{$dist} = $maintainer;
}
close($in);


# Iterate through distros in alphabetical order and map sort order to positions
# across a plane

my $i = 0;
my @plane;
my %ns_mass;
foreach my $ns ( sort keys %ns_dist ) {
    my $this_ns = delete $ns_dist{$ns};
    my @dists = keys %$this_ns;
    $ns_mass{$ns} = scalar @dists;
    foreach my $dist_name (sort { lc($a) cmp lc($b) } @dists) {
        my($row, $col) = map_index_to_plane($i);
        $plane[$row][$col] = {
            index       => $i,
            ns          => $ns,
            name        => $dist_name,
            maintainer  => $this_ns->{$dist_name},
            row         => $row,
            col         => $col,
        };
        $max_row = $row if $row > $max_row;
        $max_col = $col if $col > $max_col;
        $i++;
    }
}


# Identify namespaces with 'critical mass' and work out their neighbours

my %neighbour;
foreach my $x (0..255) {
    last unless $plane[$x];
    foreach my $y (0..255) {
        my $dist = $plane[$x][$y] or next;
        next if $ns_mass{ $dist->{ns} } < $critical_mass;
        my $dist_ns = $dist->{ns};
        $neighbour{$dist_ns} //= {};
        foreach my $i (0..1) {
            my $n = $i
                  ? $plane[$x + 1][$y]
                  : $plane[$x][$y + 1];
            next unless $n;
            next if $ns_mass{ $n->{ns} } < $critical_mass;
            if($n->{ns} ne $dist_ns) {
                $neighbour{$dist_ns}->{ $n->{ns} } = 1;
                $neighbour{ $n->{ns} }->{$dist_ns} = 1;
            }
        }
    }
}
my %mass_map = ();
while(my($ns, $value) = each %neighbour ) {
    $neighbour{$ns} = [ sort keys %$value ];
    $mass_map{$ns} = { mass => $ns_mass{$ns} };
}


# Assign colors to namespaces with critical mass

my @critical_ns = sort keys %neighbour;
my $colour_map = map_colours({}, @critical_ns)
    or die "Unable to assign colour map";

while(my($key, $value) = each %$colour_map) {
    $mass_map{$key}->{colour} = $value;
}

# Write out data as JSON export

open my $out, '>', $output_file or die "open($output_file): $!";
print $out JSON::XS->new->encode({
    mass_map => \%mass_map,
    distros => {
        rows => $max_row + 1,
        cols => $max_col + 1,
        data => \@plane,
    }
});
close($out);


exit;


sub map_index_to_plane {
    my($i) = @_;

    $path //= Math::PlanePath::HilbertCurve->new();
    if($i < 16384) {
        my($x, $y) = $path->n_to_xy($i);
        return($x, $y);
    }
    else {
        my($x, $y) = $path->n_to_xy($i - 16384);
        return($x, $y + 128);
    }
}


sub map_colours {
    my($map, $ns, @namespaces) = @_;
    no warnings qw(recursion);
    return $map unless $ns;
    my $near = $neighbour{$ns} or die "no neigbours for $ns!?!";
    my %available = map { $_ => 1 } (1..4);
    foreach my $n ( @$near ) {
        delete $available{ $map->{$n} } if $map->{$n};
    }

    foreach my $try (sort keys %available) {
        $map->{$ns} = $try;
        return $map if map_colours($map, @namespaces);
    }
    delete $map->{$ns};
    return;
}


sub class_for_dist {
    my $dist = shift or return '';
    my $colour = $colour_map->{ $dist->{ns} } or return ' class="c0"';
    return qq( class="c$colour");
}


